// ============================================================================
//                          SERVICE WORKER –î–õ–Ø PWA
//                        –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–û–ö
// ============================================================================

const CACHE_NAME = 'workout-app-v1.0.0';
const urlsToCache = [
    './',
    './index.html',
    './styles.css',
    './script.js',
    './manifest.json',
    './icon.svg',
    // –î–æ–±–∞–≤–ª—è–µ–º Google Fonts
    'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',
    'https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiA.woff2'
];

// üöÄ –£–°–¢–ê–ù–û–í–ö–ê SERVICE WORKER
self.addEventListener('install', (event) => {
    console.log('üîß Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞');
    
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => {
                console.log('üì¶ –ö—ç—à–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
                return cache.addAll(urlsToCache);
            })
            .then(() => {
                console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
                return self.skipWaiting();
            })
            .catch((error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            })
    );
});

// üîÑ –ê–ö–¢–ò–í–ê–¶–ò–Ø SERVICE WORKER
self.addEventListener('activate', (event) => {
    console.log('‚ö° Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è');
    
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (cacheName !== CACHE_NAME) {
                        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à:', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        }).then(() => {
            console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            return self.clients.claim();
        })
    );
});

// üåê –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í (–°–¢–†–ê–¢–ï–ì–ò–Ø CACHE FIRST)
self.addEventListener('fetch', (event) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è GET
    if (event.request.method !== 'GET') {
        return;
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ chrome-extension
    if (event.request.url.startsWith('chrome-extension://')) {
        return;
    }

    event.respondWith(
        caches.match(event.request)
            .then((response) => {
                // –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                if (response) {
                    console.log('üì¶ –ò–∑ –∫—ç—à–∞:', event.request.url);
                    return response;
                }

                // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ –∫—ç—à–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
                console.log('üåê –ò–∑ —Å–µ—Ç–∏:', event.request.url);
                return fetch(event.request)
                    .then((response) => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π
                        if (!response || response.status !== 200 || response.type !== 'basic') {
                            return response;
                        }

                        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                        const responseToCache = response.clone();

                        caches.open(CACHE_NAME)
                            .then((cache) => {
                                cache.put(event.request, responseToCache);
                            });

                        return response;
                    })
                    .catch((error) => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                        
                        // –ï—Å–ª–∏ —ç—Ç–æ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –º—ã –æ—Ñ–ª–∞–π–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é
                        if (event.request.destination === 'document') {
                            return caches.match('./index.html');
                        }
                        
                        throw error;
                    });
            })
    );
});

// üì± –û–ë–†–ê–ë–û–¢–ö–ê BACKGROUND SYNC
self.addEventListener('sync', (event) => {
    console.log('üîÑ Background Sync:', event.tag);
    
    if (event.tag === 'workout-data-sync') {
        event.waitUntil(syncWorkoutData());
    }
});

// üíæ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –¢–†–ï–ù–ò–†–û–í–û–ö
async function syncWorkoutData() {
    try {
        console.log('üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
        
        const clients = await self.clients.matchAll();
        clients.forEach(client => {
            client.postMessage({
                type: 'SYNC_COMPLETE',
                message: '–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'
            });
        });
        
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
}

// üîî –û–ë–†–ê–ë–û–¢–ö–ê PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
self.addEventListener('push', (event) => {
    console.log('üîî Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
    
    const options = {
        body: event.data ? event.data.text() : '–í—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üí™',
        icon: './icon.svg',
        badge: './icon.svg',
        vibrate: [200, 100, 200],
        data: {
            dateOfArrival: Date.now(),
            primaryKey: 1
        },
        actions: [
            {
                action: 'start-workout',
                title: '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
            },
            {
                action: 'remind-later',
                title: '–ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ'
            }
        ]
    };

    event.waitUntil(
        self.registration.showNotification('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', options)
    );
});

// üñ±Ô∏è –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–û–í –ü–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú
self.addEventListener('notificationclick', (event) => {
    console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é:', event.action);
    
    event.notification.close();

    if (event.action === 'start-workout') {
        event.waitUntil(
            clients.openWindow('./').then(client => {
                if (client) {
                    client.postMessage({
                        type: 'START_WORKOUT',
                        action: 'notification-click'
                    });
                }
            })
        );
    } else if (event.action === 'remind-later') {
        console.log('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ');
    } else {
        event.waitUntil(
            clients.openWindow('./')
        );
    }
});

// üìß –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ö–õ–ò–ï–ù–¢–ê
self.addEventListener('message', (event) => {
    console.log('üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', event.data);
    
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
    
    if (event.data && event.data.type === 'REQUEST_SYNC') {
        event.waitUntil(syncWorkoutData());
    }
});

console.log('üéØ Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
console.log('üì¶ –í–µ—Ä—Å–∏—è –∫—ç—à–∞:', CACHE_NAME);
